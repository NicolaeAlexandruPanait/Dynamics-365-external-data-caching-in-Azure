using System;
using System.IO;
using Microsoft.Azure.Functions.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

[assembly: FunctionsStartup(typeof(D365RedisManager.FuncStartup))]

namespace D365RedisManager
{
    class FuncStartup : FunctionsStartup
    {
        public override void Configure(IFunctionsHostBuilder builder)
        {
        }

        public override void ConfigureAppConfiguration(IFunctionsConfigurationBuilder builder)
        {
            FunctionsHostBuilderContext context = builder.GetContext();

            builder.ConfigurationBuilder
                .AddJsonFile(Path.Combine(context.ApplicationRootPath, "appsettings.json"), optional: true, reloadOnChange: false)
                .AddJsonFile(Path.Combine(context.ApplicationRootPath, $"appsettings.{context.EnvironmentName}.json"), optional: true, reloadOnChange: false)
                .AddEnvironmentVariables();
        }
    }
}

using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Microsoft.Extensions.Configuration;
using StackExchange.Redis;
using System.Linq;

namespace D365RedisManager
{
    public class D365RedisManager
    {
        [FunctionName("D365RedisManager")]
        public async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", "post", Route = null)] HttpRequest req, ILogger log)
        {
            
            string redisConn = _configuration["ConnectionStrings:redisConn"];
            string keyPatternFinder = req.Query["CacheKey"];
            if (string.IsNullOrEmpty(keyPatternFinder))
            {
                return new OkObjectResult($"Invalid CacheKey pattern");
            }
            keyPatternFinder = '*' + keyPatternFinder + '*';

            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(redisConn);
            IServer redisServer = redis.GetServer(redis.GetEndPoints()[0]);
            IDatabase db = redis.GetDatabase();

            var keys = redisServer.Keys(pattern: keyPatternFinder).ToArray();
            foreach (var key in keys)
            {
                db.KeyDelete(key);
            }
            return new OkObjectResult($"Deleted keys '{string.Join(';',keys)}'");
        }

        private readonly IConfiguration _configuration;

        public D365RedisManager(IConfiguration configuration)
        {
            _configuration = configuration;
        }
    }
}
